<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ini system

enum detailsEnum
{
name, number, tag, isElement, bacColor, elementType
}

pTable        = ds_grid_create(18, 10);
pTableDetails = ds_grid_create(180, 10);
pTableRecSize = 48;


for (i = 0; i &lt; 10; i++) 
    {
     for (j = 0; j &lt; 18; j++) 
        {
         scrSetElementDetail(scrGet1DArrayIndex(i, j), detailsEnum.isElement, true);   
        }
    }
    
for (i = 1; i &lt; 17; i++)
    {
     scrSetElementDetail(i, detailsEnum.isElement, false);   
    }
for (i = 20; i &lt; 29; i++)
    {
     scrSetElementDetail(i, detailsEnum.isElement, false);   
    }
for (i = 38; i &lt; 47; i++)
    {
     scrSetElementDetail(i, detailsEnum.isElement, false);   
    }
scrSetElementDetail(0, detailsEnum.name, "Vod√≠k");
scrSetElementDetail(0, detailsEnum.tag, "H");
scrSetElementDetail(0, detailsEnum.elementType, "non-metal");
//show_message(string(scrGetElementDetail(0, detailsEnum.name)));

scrTransformTable();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw table

xx = x;
yy = y;

// Pagination
fnt(fntArialBold, 1);
for (i = 0; i &lt; 18; i++)
    {
     draw_text(xx + (i * pTableRecSize) + (pTableRecSize / 2), yy - 48, string(i+1));
    }
for (i = 0; i &lt; 7; i++)
    {
     draw_text(xx - 32, yy  + (i * pTableRecSize) + (pTableRecSize / 2), string(i+1));
    }
fnt();

for (i = 0; i &lt; 7; i++) // Draw all colums 
    {
     for (j = 0; j &lt; 18; j++) // Rows
        {
         index = scrGet1DArrayIndex(i, j);
         // Draw only if index is element
         if (scrGetElementDetail(index, detailsEnum.isElement))
            {
             c = scrGetColorFromElementType(scrGetElementDetail(index, detailsEnum.elementType));
             if (c != "undefinied")
             {
             draw_rectangle_colour(xx, yy, xx + pTableRecSize, yy + pTableRecSize, c, c, c, c, false);
             }
             draw_rectangle(xx, yy, xx + pTableRecSize, yy + pTableRecSize, true);
             
             // Hover event
             if (mouse_in(xx, yy, xx + pTableRecSize, yy + pTableRecSize))
                {
                 clr(c_yellow, 0.3);
                 draw_rectangle(xx, yy, xx + pTableRecSize, yy + pTableRecSize, false);
                 clr();
                 
                 // Click event
                 if (device_mouse_check_button_pressed(0, mb_left))
                    {
                     scrTransformTable(x, y, 16);
                    }
                }
                
             fnt(fntArial, 1);
             draw_text(xx + (pTableRecSize / 2), yy + (pTableRecSize / 2), scrGetElementDetail(index, detailsEnum.tag));
             fnt();
            }         
         xx += pTableRecSize;
        }
     yy += pTableRecSize;
     xx  = x;
    }
  
if (abs(ts-pTableRecSize) &gt; 0.1)
    {
     //if (distance_to_point(tx, ty) &gt; 0) {move_towards_point(tx, ty, }
     pTableRecSize = lerp(pTableRecSize, ts, 0.1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
